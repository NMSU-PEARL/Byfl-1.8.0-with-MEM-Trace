#! /usr/bin/env python

###############################################################
# Render a Byfl binary-output file as a Python data structure #
# By Scott Pakin <pakin@lanl.gov>                             #
###############################################################

"""This program is really just a demonstration of how to use the SWIG
interface to the bfbin library.  First, you'll need to create a Python
module.  To do so, create a file called ``setup.py`` with the
following contents::

    #! /usr/bin/env python

    "Install a bfbin module"

    from distutils.core import setup, Extension

    bfbin_module = Extension('_bfbin',
                             sources              = ["bfbin-swig_wrap.c"],
                             include_dirs         = ["@CMAKE_INSTALL_FULL_INCLUDEDIR@"],
                             library_dirs         = ["@CMAKE_INSTALL_FULL_LIBDIR@"],
                             runtime_library_dirs = ["@CMAKE_INSTALL_FULL_LIBDIR@"],
                             libraries            = ["bfbin-swig"])

    setup(name = 'bfbin',
          version              = "@BYFL_PACKAGE_VERSION@",
          author               = "Scott Pakin",
          author_email         = "pakin@lanl.gpv",
          description          = "Parse Byfl binary output files",
          ext_modules          = [bfbin_module],
          py_modules           = ["bfbin"])

Then, follow the `SWIG documentation <http://www.swig.org/doc.html>`_
guideliness on how to build a Python module.  The following command
should work::

    $ swig -python -o bfbin-swig_wrap.c @CMAKE_INSTALL_FULL_INCLUDEDIR@/byfl/bfbin-swig.h
    $ python setup.py install

After that, you ought to be able to run ``bfbin2py``.

"""

import bfbin
import sys
import pprint

# Open the named Byfl binary-output file.
progname = sys.argv[0]
if len(sys.argv) < 2:
    sys.stderr.write("Usage: %s <filename.byfl>\n" % progname)
    sys.exit(1)
handle = bfbin.bf_open_byfl_file(sys.argv[1], 0)

# Iterate over all of the components.
file_contents = []     # List of tables
while True:
    item = bfbin.bf_read_byfl_item(handle)
    if item.item_type == bfbin.ERROR:
        sys.stderr.write("%s: %s\n" % (progname, item.string))
        break
    elif item.item_type == bfbin.FILE_END:
        break
    elif item.item_type in [bfbin.TABLE_BEGIN_BASIC, bfbin.TABLE_BEGIN_KEYVAL]:
        tablename = item.string
    elif item.item_type == bfbin.COLUMN_BEGIN:
        columns = []
    elif item.item_type in [bfbin.COLUMN_UINT64, bfbin.COLUMN_STRING, bfbin.COLUMN_BOOL]:
        columns.append((item.string, []))
    elif item.item_type == bfbin.ROW_BEGIN:
        col = 0
    elif item.item_type == bfbin.DATA_UINT64:
        columns[col][1].append(item.integer)
        col += 1
    elif item.item_type == bfbin.DATA_STRING:
        columns[col][1].append(item.string)
        col += 1
    elif item.item_type == bfbin.DATA_BOOL:
        columns[col][1].append(item.boolean)
        col += 1
    elif item.item_type in [bfbin.TABLE_END_BASIC, bfbin.TABLE_END_KEYVAL]:
        if item.item_type == bfbin.TABLE_END_KEYVAL:
            columns = [(columns[c][0], columns[c][1][0]) for c in range(len(columns))]
        file_contents.append((tablename, columns))

# Close the Byfl file.
bfbin.bf_close_byfl_file(handle)

# Pretty-print the file contents.
pprint.pprint(file_contents)
